import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { OpenAI } from 'openai';
import fs from 'fs';

/* ‚îÄ‚îÄ‚îÄ Credenciais ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const SUPABASE_URL = 'https://gjvtncdjcslnkfctqnfy.supabase.co';
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_KEY;
const DEEPSEEK_KEY = process.env.DEEPSEEK_API_KEY;

if (!SUPABASE_KEY || !DEEPSEEK_KEY) {
  console.error('‚ùå Vari√°veis de ambiente ausentes.');
  process.exit(1);
}

/* ‚îÄ‚îÄ‚îÄ Clientes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const db = createClient(SUPABASE_URL, SUPABASE_KEY);
const ai = new OpenAI({ apiKey: DEEPSEEK_KEY, baseURL: 'https://api.deepseek.com/v1' });

/* ‚îÄ‚îÄ‚îÄ Log simplificado ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const log = fs.createWriteStream('audit.log', { flags: 'a' });
const L = (m: string) => { console.log(m); log.write(m + '\n'); };

/* ‚îÄ‚îÄ‚îÄ Prompt do DeepSeek ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const SYSTEM_PROMPT = `
Voc√™ est√° atuando como um agente de curadoria matem√°tica respons√°vel por revisar e corrigir quest√µes classificadas como ‚Äúmon√¥mios‚Äù.

Sua fun√ß√£o √©:
1. Verificar se a quest√£o est√° corretamente classificada como ‚Äúmon√¥mio‚Äù ‚Äî e ser EXTREMAMENTE RIGOROSO nisso.
2. Corrigir a quest√£o se necess√°rio (enunciado, alternativas, √≠ndice correto).
3. Corrigir ou gerar o campo LaTeX do enunciado e das alternativas.
4. Corrigir ou gerar uma dica pedag√≥gica (hint) se estiver ausente.
5. Garantir que tudo esteja consistente e autocontido.
6. Retornar os campos corrigidos em formato estruturado (ver abaixo).

---

CRIT√âRIOS RIGOROSOS PARA ACEITAR COMO "QUEST√ÉO DE MON√îMIOS":

‚úîÔ∏è √â mon√¥mio apenas se:
‚Ä¢ A express√£o matem√°tica for um √∫nico termo alg√©brico, como:
  - 5x, -3a¬≤, 7xy¬≤/2, -3/4mn¬≥
‚Ä¢ OU a opera√ß√£o envolver SOMENTE mon√¥mios semelhantes, como:
  - 3x + 2x
  - 7a¬≤b - 4a¬≤b

A opera√ß√£o pode ser:
‚Ä¢ multiplica√ß√£o entre mon√¥mios
‚Ä¢ divis√£o entre mon√¥mios
‚Ä¢ soma ou subtra√ß√£o entre mon√¥mios semelhantes
‚Ä¢ identifica√ß√£o de grau, coeficiente ou parte literal

‚ùå N√ÉO √â MON√îMIO SE:
‚Ä¢ Envolve termos diferentes (ex: 3x + 2y, x¬≤ + x)
‚Ä¢ Envolve equa√ß√µes (ex: 3x = 6)
‚Ä¢ Envolve avalia√ß√£o num√©rica de express√µes com mais de um termo (ex: 4a - 2)
‚Ä¢ √â bin√¥mio ou polin√¥mio

---

EXEMPLOS V√ÅLIDOS:
- ‚ÄúMultiplique os mon√¥mios 3a¬≤ e -2a¬≥.‚Äù
- ‚ÄúQual o grau do mon√¥mio -5x‚Å¥y¬≤?‚Äù
- ‚ÄúCalcule 6x¬≥ √∑ 2x.‚Äù
- ‚ÄúSome -3ab¬≤ com 5ab¬≤.‚Äù

EXEMPLOS INV√ÅLIDOS:
- ‚ÄúQual o valor de 4a - 2 para a = 3?‚Äù ‚Üí bin√¥mio
- ‚ÄúResolva 3x = 9.‚Äù ‚Üí equa√ß√£o
- ‚ÄúSimplifique 2x¬≤ + 3x - x¬≤.‚Äù ‚Üí polin√¥mio

---

RESPOSTA ESTRUTURADA (JSON):

{
  "isMonomio": true | false,
  "corrected_topic": "monomios" | "binomios" | "avaliacao_alg" | ...,
  "statement_latex": "...",
  "options_latex": ["...", "...", "...", "..."],
  "correct_option_index": 0-3,
  "hint": "...",
  "remarks": "Corre√ß√£o aplicada com base nos crit√©rios acima."
}

‚ö†Ô∏è N√£o justifique. Apenas corrija. Corrija portugu√™s, LaTeX e l√≥gica se necess√°rio.
`;

const topic = process.argv.find(a => a.startsWith('--topic='))?.split('=')[1] ?? 'monomios';

/* ‚îÄ‚îÄ‚îÄ Execu√ß√£o principal ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
(async () => {
  L(`üîç ${new Date().toISOString()} ‚Ä¢ t√≥pico: ${topic}`);

  const { data: qs, error } = await db
    .from('questions')
    .select('*')
    .eq('topic', topic);

  if (error) throw error;
  if (!qs?.length) { L('‚ö†Ô∏è Nenhuma quest√£o.'); process.exit(0); }

  let pendentes = 0;

  for (const q of qs) {
    L(`\nID ${q.id}`);

    const payload = {
      statement:      q.statement_md,
      options:        q.options,
      correct_option: q.correct_option,
      solution:       q.solution_md
    };

    const chat = await ai.chat.completions.create({
      model: 'deepseek-reasoner',
      temperature: 0,
      messages: [
        { role: 'system', content: SYSTEM_PROMPT },
        { role: 'user',   content: JSON.stringify(payload) }
      ]
    });

    const raw = chat.choices[0]?.message.content ?? '';
    let res: any;
    try { res = JSON.parse(raw); } catch {
      L('‚ùå JSON inv√°lido'); pendentes++; continue;
    }

    if (res.isMonomio !== true) { L('‚õî reprovada'); pendentes++; continue; }

    const fix: any = {};
    if (res.corrected_topic)                fix.topic           = res.corrected_topic;
    if (res.statement_latex)                fix.statement_md    = res.statement_latex;
    if (res.options_latex)                  fix.options         = res.options_latex;
    if (res.correct_option_index !== null)  fix.correct_option  = res.correct_option_index;
    if (res.hint)                            fix.hints           = [res.hint];

    if (Object.keys(fix).length) {
      const { error } = await db.from('questions').update(fix).eq('id', q.id);
      if (error) { L(`‚ùå update: ${error.message}`); pendentes++; }
      else       { L('üîß corrigido'); }
    } else pendentes++;
  }

  L(`\nüèÅ ${qs.length} processadas ‚Ä¢ ${pendentes} pendentes`);
  log.end();
  process.exit(pendentes ? 1 : 0);
})();
